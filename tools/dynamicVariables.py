#!/usr/bin/env python3

import os
from pathlib import Path
from pygit2 import Repository
import yaml

## Set and verify the GIT repo in the current directory.
try:
    repo = Repository('.')
except:
    exit("\n---\nError: Unable to access GIT repository data. Please verify your current directory contains a GIT repo.")

## Set the deployment name using a short commit hash of 8 characters.  Future feature.
# try:
#     commit_name = repo.revparse_single('HEAD^').hex[:6]
#     if not commit_name:
#         raise ValueError(f"\n---\nError: Unable to parse GIT commit data. Please commit your work and try again.")
# except ValueError as e:
#     exit(str(e))

## Set the deployment name using the current branch name.  To be replaced with the short commit hash above.
try:
    deployment_name = Repository('.').head.shorthand.lower()
except:
    exit("\n---\nError: Unable to get current branch information.")

## Verify the Terraform path exists.
try:
    terraform_path = f"terraform/{deployment_name}"
    verify_directory = os.path.isdir(terraform_path)
    if verify_directory is False:
        raise ValueError(f"\n---\nError: Unable to verify the path, {terraform_path}, exists.")
except ValueError as e:
    exit(str(e))

## Verify the terraform.tfvars file exists. If not, create it.
try:
    tfvars_output_file = f"{terraform_path}/terraform.tfvars"
    tfvars_verify_file = os.path.exists(tfvars_output_file)
    if tfvars_verify_file is False:
        raise ValueError(f"Output file path, {tfvars_output_file}, doesn't exist.  Creating it.")
except ValueError as e:
    print(str(e))
    myfile = Path(tfvars_output_file)
    myfile.touch(exist_ok=True)

## Verify the variables.tf file exists. If not, create it.
try:
    vars_output_file = f"{terraform_path}/variables.tf"
    vars_verify_file = os.path.exists(vars_output_file)
    if vars_verify_file is False:
        raise ValueError(f"Output file path, {vars_output_file}, doesn't exist.  Creating it.")
except ValueError as e:
    print(str(e))
    myfile = Path(vars_output_file)
    myfile.touch(exist_ok=True)


def writeData(yaml_data, tfvars_file, vars_file):
    ## Loop over the data contained in the variables.yml file, writing to the terraform.tfvars and variables.tf files.
    for var_items in yaml_data.items():
        ## We need to iterate through each dictionary in the YAML file.
        for output in var_items:
            ## The dictionary itself, which will be a string.
            if type(output) is str:
                top = output
            ## And iterate through any values contained within the dictionary.
            if type(output) is dict:
                for key in output:
                    ## If we detect a list, we need to update the formatting so it can be used by Terraform.
                    if type(output[key]) is list:
                        converted = str(output[key]).replace("'", '"')
                        tfvars_file.write(f"{top}_{key} = {converted}\n")
                    ## Otherwise, write the variable stored in the yaml file.
                    else:
                        ## Write to the terraform.tfvars file.
                        tfvars_file.write(f"{top}_{key} = \"{output[key]}\"\n")
                    ## Write to the variables.tf file.
                    vars_file.write(f"variable \"{top}_{key}\"" + " {}\n")


def editFiles(variables, secrets):

    ## Open the files to be written: terraform.tfvars and variables.tf.
    tfvars_file = open(tfvars_output_file, "w")
    vars_file = open(vars_output_file, "w")

    ## Write variables which are dynamically generated by the branch name: deployment_name, dns_cluster_name, dns_wildcard_name
    tfvars_dynamic_data = f"deployment_name = \"{deployment_name}\"\ndns_cluster_name = \"cluster.{deployment_name}\"\ndns_wildcard_name = \"*.{deployment_name}\"\n"
    vars_dynamic_data = "variable \"deployment_name\" {}\nvariable \"dns_cluster_name\" {}\nvariable \"dns_wildcard_name\" {}\n"

    tfvars_file.write(tfvars_dynamic_data)
    vars_file.write(vars_dynamic_data)

    writeData(variables, tfvars_file, vars_file)
    writeData(secrets, tfvars_file, vars_file)

    ## Close files.
    tfvars_file.close()
    vars_file.close()


if __name__ == '__main__':

    ## Verify the variables.yml file exists and can be opened.
    try:
        variables_query = open("variables.yml")
    except:
        exit("\n---\nError: Unable to open variables.yml file. Please make sure the file exists before continuing.")

    ## Verify the secrets.yml file exists and can be opened.
    try:
        secrets_query = open("secrets.yml")
    except:
        exit("\n---\nError: Unable to open secrets.yml file. Please make sure the file exists before continuing.")

    ## Load YAML data from the variables.yml file.
    variables_data = yaml.load(variables_query, Loader=yaml.FullLoader)
    secrets_data = yaml.load(secrets_query, Loader=yaml.FullLoader)

    ## Run the function to populate the variable data.
    editFiles(variables_data, secrets_data)

    ## Notify we've populated the files.
    print(f"Wrote variables to {tfvars_output_file}.")
    print(f"Wrote definitions to {vars_output_file}.")

    ## Close all files.
    variables_query.close()
    secrets_query.close()